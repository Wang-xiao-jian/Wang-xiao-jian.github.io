---
layout: post
title: "Posix 消息队列"
subtitle: "记录一下学习的Posix消息队列的内容"
data: 2019-11-11 23:09:00 +0800
author: "riki"
header-img: "img/postfm/20191111.jpg"
tags:
- UNIX
- IPC
- 消息队列
typora-root-url: ..
---

> 记一个悲愤的双十一...

##### 什么是消息队列

前面一篇博客提到了FIFO和管道它们的数据模型是字节流I/O模型，存在于它们中的消息不存在边界，那篇博客中写道：

> 比如说一个管道里有100字节的数据，应用程序无法判断这是单次写入100字节，还是分100次每次写一个字节或者其他某种总共100字节的写操作的组合。一个进程写了60字节，另一个字节写了40字节，这也是可能的。如果想要将这种字节流分隔成单个记录，那么是需要应用程序来实现的。

消息队列就不一样了，它可以看作是一个消息链表，拥有写权限的进程可以往里面写入消息，拥有读权限的进程可以往里面读出消息。每个消息都相当于一个记录，它是有边界的。当一个进程要往消息队列中写入消息时，不需要已经存在一个进程准备从该消息队列中读取，这和管道和FIFO又是不一样的。写入消息时，写入者可以赋予该消息一个优先级。

我们设想的消息队列的结构是一个链表，它由一个表头和所有的消息组成：

![](/img/in-post/posix消息队列模型.jpg)

表头中包含该队列的两个属性：队列中允许的最大消息数：mq_maxmsg，以及每个消息的最大大小：ma_msgsize，这是消息队列的两个限制。

消息队列是随内核持续的，所以我们可以在一个进程中创建了一个消息队列，然后在另外一个进程中往该消息队列发送一个消息，最后再启动另外一个进程，从队列中读取消息

###### 消息的属性

从上图中可以看到消息含有3个属性：优先级，长度和数据本身。

优先级是发送者赋予消息的，对于Posix来说，它是一个无符号整数。消息的长度可以为0，如果不为0，则消息中应含有数据部分。

##### Posix消息队列相关函数

相关的变量、结构、函数都在`<mqueue.h>`中声明：

它定义了mqd_t类型，用来当做消息队列描述符，该描述符可能通过文件描述符来实现，在这种情况下，应用打开的消息队列数量会被`OPEN_MAX`限制；

它定义了mq_attr结构，用来获取或者设置消息队列的属性：

```c++
struct mq_attr {
	long mq_flags;
	long mq_maxmsg;
	long mq_msgsize;
	long mq_curmsgs;
}
```

###### mq_open

```c++
mqd_t mq_open(const char* name, int oflag, mode_t mode, struct mq_attr* attr)
```

该函数用以创建一个新的消息队列或者打开一个已存在的消息队列。

Posix消息队列的名字只能以`/`开头，并且后续不能再出现`/`，可以在`/dev/mqueue`路径下查看创建的消息队列。

oflag指定以什么模式（只读、只写、读写）来打开消息队列，可能按位或上O_CREAT、O_EXCL或者O_NONBLOCK。

当创建一个消息队列时，mode参数和attr参数是需要的。mode参数用以设置各类用户对该消息队列的读写权限，当然这会被当前进程文件模式创建掩码修正。这些变量在`<sys/stat.h>`中定义。

attr用以指定一些新属性，如果填空则使用默认属性。在创建队列时，可以指定mq_msgsize属性和mq_maxmsg属性值，且必须一起指定，不能只制定一个。

返回值被称为消息队列描述符，但它并不一定是像其它文件描述符一样的短整数。它用来当做其他7个函数的第一个参数。

###### mq_close

```c++
int mq_close(mqd_t mqd)
```

顾名思义，用来关闭一个已经打开的消息队列。但是该消息队列不会从系统中删除，只是调用进程不可以再使用该消息队列。

###### mq_unlink

`int mq_unlink(mqd_t mqd)`

从系统中删除使用`mq_open`打开或创建的消息队列。

###### mq_getattr && mq_setattr

```c++
int mq_getattr(mqd_t mqd, struct mq_attr* attr);
int mq_setattr(mqd_t mqd, struct mq_attr* attr, struct mq_attr* oattr);
```

`mq_getattr`将指定的消息队列的当前属性填入mq_attr指针指向的对象中。

`mq_setattr`则给指定的消息队列设定属性。但它只能使用mq_attr结构中的oflag成员，用以给消息队列清除或设置非阻塞标志。mq_maxmsg属性和mq_msgsize属性只能在创建时设定，mq_curmsg消息队列中当前的消息数量则不能设定。

此外，当oattr指针不为空时，则会将该消息队列的原有属性储存在其中。

###### mq_send && mq_receive

```c++
int mq_send(mqd_t mqd, const char* ptr, size_t len, unsigned int prio);
int mq_receive(mqd_t mqd, char* ptr, size_t len, unsigned int* prio);
```

两个函数的最后一个参数是优先级的意思，如果无需使用消息的优先级，那么在发送时指定优先级为0，在接收时该参数设为空指针即可。

调用`mq_receive`时，指定的长度不能小于mq_attr中的`mq_msgsize`的值，否则会返回一个EMSGSIZE错误。这意味着在调用mq_receive之前需要调用mq_getattr来确定最大消息大小。如果prio是一个非空指针，那么取回消息的优先级就储存在此。

##### 一些小程序

前面有提到过，因为消息队列的持续性是随内核持续的，所以我们可以写一系列的小程序，分别用于创建消息队列、读写、移除等。

###### 消息队列的创建

```c++
#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <stdio.h>

#include <errno.h>

#include <stdlib.h>

#define FILE_MODE (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)

int main(int argc, char** argv)
{
	int flag = O_RDWR | O_CREAT;

	struct mq_attr attr = { 0 };
	int c;
	while ( -1 != (c = getopt(argc, argv, "em:z:"))) {
		switch (c) {
			case 'e' :
				flag |= O_EXCL;
				break;
			case 'm' :
				attr.mq_maxmsg = atol(optarg);
				break;
			case 'z' :
				attr.mq_msgsize = atol(optarg);
				break;
		}
	}

	if (optind != argc -1) {
		printf("usage : mqcreate [ -e ] [-m maxmsg -z msgsize] <name>\n");
		_exit(0);
	}

	if ((attr.mq_maxmsg == 0 && attr.mq_msgsize != 0) ||
		(attr.mq_maxmsg != 0 && attr.mq_msgsize == 0)) {
		printf("must specify both -m maxmsg and -z msgsize\n");
		_exit(0);
	}

	mqd_t mqd = mq_open(argv[optind], flag, FILE_MODE, (attr.mq_maxmsg == 0) ? NULL : &attr);

	if (-1 == mqd) {
		printf("open error\n");
		printf("code : %d\n", errno);
	}
	mq_close(mqd);
	return 0;
}
```

###### 获取消息队列的属性

```c++
#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <stdio.h>

#include <sys/stat.h>

#define FILE_MODE (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)

int main(int argc, char const *argv[])
{
	if (2 != argc) {
		printf("usage : mqgetattr <name>\n");
		_exit(0);
	}

	mqd_t mqd = mq_open(argv[1], O_RDONLY);
	struct mq_attr myattr;
	mq_getattr(mqd, &myattr);

	printf("max #msg = %ld, max #bytes/msg = %ld, "
		"#currently on queue = %ld\n", 
		myattr.mq_maxmsg, myattr.mq_msgsize,
		myattr.mq_curmsgs);

	return 0;
}
```

###### 移除消息队列

```c++
#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <stdio.h>

#define FILE_MODE (S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH)

int main(int argc, char const *argv[])
{
	if (2 != argc) {
		printf("usage : mqunlink <name>\n");
		_exit(0);
	}

	mq_unlink(argv[1]);
	return 0;
}
```

###### 发送消息

```c++
#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <stdio.h>

#include <sys/types.h>

#include <stdlib.h>

int main(int argc, char* argv[])
{
	mqd_t mqd;
	void* ptr;
	size_t len;
	uint prio;
	if (argc != 4) {
		printf("usage : mqsend <name> <#byte> <priority>\n");
		_exit(0);
	}

	len = atoi(argv[2]);
	prio = atoi(argv[3]);
	mqd = mq_open(argv[1], O_WRONLY);

	ptr = calloc(len, sizeof(char));
	mq_send(mqd, (char *)ptr, len, prio);
	return 0;
}
```

###### 接收消息

```c++
#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <stdio.h>

#include <sys/types.h>

#include <stdlib.h>

int main(int argc, char* argv[])
{
	int c, flags;
	mqd_t mqd;
	ssize_t n;
	uint prio;
	void* buff;
	struct mq_attr attr;
	flags = O_RDONLY;
	while (-1 != (c = getopt(argc, argv, "n"))) {
		switch (c) {
			case 'n' :
				flags |= O_NONBLOCK;
				break;
		}
	}

	if (optind != argc - 1) {
		printf("usage : mqreceive [ -n ] <name>\n");
		_exit(0);
	}

	mqd = mq_open(argv[optind], flags);
	mq_getattr(mqd, &attr);

	buff = malloc(attr.mq_msgsize);

	n = mq_receive(mqd, (char *)buff, attr.mq_msgsize, &prio);
	printf("read %ld bytes, priority = %u\n", n, prio);
	return 0;
}
```

##### 异步消息通知

如果说我们不知道何时消息队列中放入了一个新消息的话，对于接受消息的应用来说，要么阻塞在mq_receive的调用上，这样我们的进程就不能做其他的事情；要么我们就设置非阻塞标志，这样我们得持续调用mq_receive以等待某个消息的到达，这种行为被称为轮询(polling)，这无疑是对CPU时间的浪费。

好在Posix消息队列允许异步事件通知(asynchronous event notification)，它会告知我们何时有一个消息放置到了消息队列中，这种通知有两种形式：

- 产生一个信号
- 创建一个线程来执行一个指定的函数

这种通知是通过mq_notify来建立的：

```c++
int mq_notify(mqd_t mqd, const struct sigevent* notification);
```

该函数能够为指定队列建立或删除通知。`sigevent`结构体在<signal.h>中定义：

```c++
union sigval {
	int sigval_int;
	void* sigval_ptr;
};
struct sigevent {
	int sigev_notify;
	int sigev_signo;
	union sigval sigev_value;
	void (*sigev_notify_function)(union sigval);
	pthread_attr_t* sigev_notify_attributes;
}
```

`sigev_notify`的取值代表通知的方式：

1. SIGEV_NONE代表不通知
2. SIGEV_SIGNAL代表产生一个信号
3. SIGEV_THREAD代表创建一个线程来执行一个指定的函数

如果采取的通知方式是产生信号的话，`sigev_signo`指定生成的信号。

`sigev_value`会传递给信号处理函数或者新创建的线程。

如果采取的通知方式是创建线程的话，需要指定线程执行的函数以及线程的属性，但我想应该允许使用默认属性。

###### 适用于mq_notify的普适性规则

- 如果notification参数非空，那么当前进程希望当有一个消息到达先前为空的指定队列时获得通知，“该进程被注册为接收该队列的通知”。
- 如果notification参数为空，且当前进程目前被注册为该消息队列的通知，那么已存在的注册将会被注销。
- 任意时刻只有一个进程可以被注册为接受某个给定队列的通知。
- 发出通知的必要条件：
  - 有一个消息到达先前为空的消息队列，即“从无到有”。
  - 已有一个进程被注册为接收该消息队列通知。
  - 没有任何线程或进程阻塞在对该消息队列的mq_receive上，即在mq_receive调用中的阻塞比通知的优先度要高。
- 当该通知发送给它的注册进程时，其注册即被注销。如果想要重新注册，那么进程必须再次调用mq_notify。

在我看来需要注意的地方有这么几点，一是发出通知的必要条件是有一个消息到达先前为空的消息队列，如果该消息队列中原有一个消息，此时企图通过mq_notify注册来获取通知是永远不可能实现的，在消息队列变空之前通知是不会再次发出的。

这就引出了第二点，通常我们是不会单单只收一次通知就满足我们的需求的。更常见的是我们的进程注册通知，等待消息到来后我们会取出消息并且重新注册以等待后续的消息，在等待的过程中我们挂起进程以节省CPU时间或者干些其他的事情。那么重新注册的时机其实是有讲究的，我们需要在取出消息之前进行重新注册。因为在读出消息到重新注册存在一个空窗期，这段时间如果再来了一个消息，那么我们虽然重新注册了，但是不会再收到通知。此外我们还需以非阻塞模式循环读取队列中的消息以防止近乎同时到来多个消息的情况。

###### 简单消息通知

```c++
#include <cstdio>

#include <unistd.h>

#include <mqueue.h>

#include <fcntl.h>

#include <cstdlib>

#include <signal.h>

#include <errno.h>

#include <sys/types.h>

mqd_t mqd;
void* buff;
struct mq_attr* attr;
struct sigevent sigev;

int main(int argc, char *argv[])
{
	if (argc != 2) {
		printf("usage : Mq_notify <name>\n");
		_exit(0);
	}

	mqd = mq_open(argv[1], O_RDONLY | O_NONBLOCK);
	mq_getattr(mqd, &attr);
	void *buff = malloc(attr.mq_msgsize);

    signal(SIGUSR1, sigfunc);
	sigev.sigev_notify = SIGEV_SIGNAL;
	sigev.sigev_signo = SIGUSR1;
	mq_notify(mqd, &sigev);

	while (1) {
        pause();
    }
	return 0;
}

static void sigfunc(int signo)
{
    ssize_t n;
    mq_notify(mqd, &sigev);
    n = mq_receive(mqd, (char *)buff, attr.mq_msgsize, NULL);
    printf("SIGUSR1 received, read %ld bytes\n", (long) n);
}
```

这里呢有一个很严重的错误，下回分解。。。