---
layout: post
title: "UNIX IPC 开篇"
data: 2019-11-03 23:04:00 +0800
author: "riki"
header-img: "img/post-bg-unix-linux.jpg"
tags:
- UNIX
- IPC
---

> 未完待续

###### 进程间通信的意义

大多数重要的程序都涉及进程间通信(interprocess communication, IPC)，就我来说，linux环境下在命令行中使用管道符是很常见的。

有一个设计原则是：把应用程序设计为一组相互通信的小片段比将其设计为单个庞大的程序更好。为什么呢？应用程序的构建方法有这么几种：

- 用一个庞大的程序完成所有的工作。程序的各部分可以设计为函数，函数之间通过参数，返回值，全局变量来交换信息。
- 使用多个程序，每个程序完成工作的一部分，程序之间使用某种IPC来通信。UNIX很多的标准工具就是这种形式，它们使用shell管道传递信息。
- 使用一个包含多线程的程序，每个线程完成工作的一部分，线程之间使用某种IPC来通信(这里仍然使用术语IPC来表述)。

后面两种方法其实还可以结合起来，使用多个进程，每个进程都能包含多个线程，这样不同进程之间可以通信，进程间的多个线程也可以通信。这样在有多个处理器的系统之上，多个进程也许可以同时运行，单个进程中的多个线程也许也可以同时运行，这样就有望减少完成指定任务的时间。

###### 通过学习UNIX网络编程卷2：进程间通信我要掌握的内容

- 消息传递的方式：管道，FIFO，Posix消息队列，System V消息队列
- 同步：互斥锁和条件变量，读写锁，信号量
- 共享内存：这也是消息传递的方式

- 用一个庞大的程序完成所有的工作，程序的各部分可以实现为函数，函数之间可以通过参数，返回值来交换信息。

- 使用多个程序，程序之间通过某种IPC来实现通信。很多UNIX的标准工具就是这种形式的，它们会使用管道来传递信息。

- 使用一个包含多线程的程序，线程之间使用某种IPC(这里仍然将线程间的通信用术语IPC来表述)。

  后两种方法